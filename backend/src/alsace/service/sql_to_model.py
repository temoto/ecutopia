import argparse
import os
import sys

import logbook

from . import migrate
import ecutopia.app
import helpers


cmdline = argparse.ArgumentParser()
cmdline.add_argument('--output', choices=('files', 'stdout'), default='files')
cmdline.add_argument('--quiet', action='store_true', default=False)
cmdline.add_argument('--verbose', action='store_true', default=False)
cmdline.add_argument('files', metavar='FILE', nargs='*')

log = logbook.Logger('sql_to_model')


def main():
    flags = cmdline.parse_args()

    app = ecutopia.app.init(
        quiet=flags.quiet,
        verbose=flags.verbose,
        init_db=False,
        init_settings=False,
    )
    generated_path = app.config['paths']['package'] + '/generated/'

    if flags.output == 'files':
        try:
            os.makedirs(generated_path)
        except os.error:
            pass
        with open(generated_path + '/__init__.py', 'a'):
            pass

    if flags.files:
        migrations = []
        for path in flags.files:
            path = os.path.abspath(path)
            parts = path.split('/')
            migrations.append((parts[-2], parts[-2] + '/' + parts[-1], path))
    else:
        migrations = migrate.enumerate_migration_files(app.config['paths']['migration'])

    results = []
    for group, key, path in migrations:
        log.debug('Processing {0}'.format(key))
        with open(path, 'rt') as f:
            text = f.read()

        current = tuple(helpers.db.import_models(text))
        if not current:
            continue
        path_relative = path.replace(app.config['paths']['project'], '').lstrip('/')
        results.append((
            path_relative,
            [r[0] for r in current],
            '\n'.join(r[1] for r in current),
        ))

    model_names = []
    for r in results:
        model_names.extend(r[1])

    output_text = '''\
# This file is automatically generated
import helpers

__all__ = [{model_names}\n]

{codes}'''.format(
        model_names=''.join('\n    \'{0}\','.format(name) for name in model_names),
        codes='\n'.join('''
# Begin {path}
{code}
# End {path}
'''.format(path=r[0], code=r[2]) for r in results),
    )

    if flags.output == 'files':
        output_path = '{generated}/model.py'.format(generated=generated_path)
        with open(output_path, 'wt') as output:
            output.write(output_text)
    elif flags.output == 'stdout':
        sys.stdout.write(output_text)

if __name__ == '__main__':
    main()
